import type {
  OrderResponse,
  EmployeeResponse,
  PlanningResponse,
  PlanningGenerationResponse,
  SystemDebugResponse
} from './types'

class ApiService {
  private readonly BASE_URL = 'http://localhost:8080'

  // ========== ORDERS API ==========
  async getOrders(): Promise<OrderResponse[]> {
    try {
      const response = await fetch(`${this.BASE_URL}/api/orders/frontend/orders`)
      if (!response.ok) throw new Error(`HTTP ${response.status}`)
      return await response.json()
    } catch (error) {
      console.error('❌ Orders API error:', error)
      return []
    }
  }

  async getOrderCards(orderId: string): Promise<any[]> {
    try {
      const response = await fetch(`${this.BASE_URL}/api/orders/frontend/orders/${orderId}/cards`)
      if (!response.ok) throw new Error(`HTTP ${response.status}`)
      return await response.json()
    } catch (error) {
      console.error('❌ Order cards API error:', error)
      return []
    }
  }

  // ========== EMPLOYEES API ==========
  async getEmployees(): Promise<EmployeeResponse[]> {
    try {
      const response = await fetch('/api/employees/active')
      if (!response.ok) throw new Error(`HTTP ${response.status}`)

      const data = await response.json()
      return Array.isArray(data) ? data : []
    } catch (error) {
      console.error('❌ getEmployees error:', error)
      return []
    }
  }

  async createEmployee(employee: Partial<EmployeeResponse>): Promise<any> {
    try {
      const response = await fetch('/api/employees', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(employee)
      })

      if (!response.ok) throw new Error(`HTTP ${response.status}`)
      return await response.json()
    } catch (error) {
      console.error('❌ createEmployee error:', error)
      throw error
    }
  }
  // ========== PLANNING API ==========
  async getPlannings(date?: string): Promise<PlanningResponse[]> {
    try {
      const url = date
        ? `${this.BASE_URL}/api/planning/view-simple?date=${date}`
        : `${this.BASE_URL}/api/planning/view-simple`

      const response = await fetch(url)
      if (!response.ok) throw new Error(`HTTP ${response.status}`)

      const data = await response.json()
      return Array.isArray(data) ? data : []
    } catch (error) {
      console.error('❌ Planning API error:', error)
      return []
    }
  }

  async generatePlanning(config: any = {}): Promise<PlanningGenerationResponse> {
    try {
      const response = await fetch(`${this.BASE_URL}/api/planning/generate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          startDate: config.startDate || '2025-06-01',
          timePerCard: config.timePerCard || 3,
          cleanFirst: config.cleanFirst || false
        })
      })
      if (!response.ok) throw new Error(`HTTP ${response.status}`)
      return await response.json()
    } catch (error) {
      console.error('❌ Generate planning API error:', error)
      throw error
    }
  }

  // ========== SYSTEM API ==========
  async getSystemInfo(): Promise<SystemDebugResponse> {
    try {
      const response = await fetch(`${this.BASE_URL}/api/planning/debug-real`)
      if (!response.ok) throw new Error(`HTTP ${response.status}`)
      return await response.json()
    } catch (error) {
      console.error('❌ System info API error:', error)
      return {
        availableOrders: 0,
        activeEmployees: 0,
        availableColumns: [],
        sampleOrders: [],
        status: 'ERROR',
        message: error.message,
        error: error.message
      }
    }
  }

  // ========== UTILITY METHODS ==========
  async testConnection(): Promise<{ success: boolean; message: string }> {
    try {
      const response = await fetch(`${this.BASE_URL}/api/employees/debug`)
      return {
        success: response.ok,
        message: response.ok ? 'Backend accessible' : `HTTP ${response.status}`
      }
    } catch (error) {
      return {
        success: false,
        message: `Connection failed: ${error.message}`
      }
    }
  }
}

// ========== SINGLETON EXPORT ==========
export const apiService = new ApiService()

// ========== TYPE RE-EXPORTS ==========
export * from './types'

// ========== CONVENIENCE FUNCTIONS ==========
export const generatePlanning = (config?: any) => apiService.generatePlanning(config)
export const getTodaysPlannings = () => apiService.getPlannings()
export const getSystemStatus = () => apiService.getSystemInfo()

export default apiService
