<template>
  <div id="pokemon-planning-dashboard" class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
    <!-- üéÆ En-t√™te Principal -->
    <header class="bg-white shadow-lg border-b-4 border-indigo-500">
      <div class="max-w-7xl mx-auto px-6 py-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="bg-indigo-500 text-white p-3 rounded-lg">
              <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
                <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a1 1 0 001 1h6a1 1 0 001-1V3a2 2 0 012 2v6.5a1.5 1.5 0 01-1.5 1.5h-9A1.5 1.5 0 014 11.5V5z"/>
              </svg>
            </div>
            <div>
              <h1 class="text-2xl font-bold text-gray-900">üé¥ Planification Pok√©mon</h1>
              <p class="text-sm text-gray-600">Gestion optimis√©e des commandes depuis juin 2025</p>
            </div>
          </div>

          <div class="flex items-center space-x-4">
            <!-- Stats rapides -->
            <div class="text-right">
              <div class="text-sm font-medium text-gray-500">Commandes en cours</div>
              <div class="text-2xl font-bold text-indigo-600">{{ statistics.totalOrders || 0 }}</div>
            </div>
            <div class="text-right">
              <div class="text-sm font-medium text-gray-500">Employ√©s actifs</div>
              <div class="text-2xl font-bold text-green-600">{{ statistics.activeEmployees || 0 }}</div>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- üéõÔ∏è Panneau de Contr√¥le -->
    <div class="max-w-7xl mx-auto px-6 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8">

        <!-- ‚ö° Actions Rapides -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-200">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">‚ö° Actions Rapides</h3>

            <div class="space-y-3">
              <button
                  @click="generatePlanning"
                  :disabled="isGenerating"
                  class="w-full bg-indigo-500 hover:bg-indigo-600 disabled:bg-gray-400 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2">
                <svg v-if="isGenerating" class="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"/>
                  <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                </svg>
                <span>{{ isGenerating ? 'G√©n√©ration...' : 'üöÄ G√©n√©rer Planning' }}</span>
              </button>

              <button
                  @click="simulatePlanning"
                  :disabled="isSimulating"
                  class="w-full bg-purple-500 hover:bg-purple-600 disabled:bg-gray-400 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200">
                {{ isSimulating ? 'Simulation...' : 'üé≤ Simuler' }}
              </button>

              <button
                  @click="refreshData"
                  :disabled="isRefreshing"
                  class="w-full bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200">
                {{ isRefreshing ? 'Actualisation...' : 'üîÑ Actualiser' }}
              </button>

              <button
                  @click="cleanupPlannings"
                  class="w-full bg-red-500 hover:bg-red-600 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200">
                üßπ Nettoyer
              </button>
            </div>

            <!-- Options avanc√©es -->
            <div class="mt-6 p-4 bg-gray-50 rounded-lg">
              <h4 class="text-sm font-medium text-gray-700 mb-3">Options</h4>
              <label class="flex items-center space-x-2">
                <input v-model="cleanFirst" type="checkbox" class="rounded border-gray-300">
                <span class="text-sm text-gray-600">Nettoyer avant g√©n√©ration</span>
              </label>
            </div>
          </div>
        </div>

        <!-- üìä Statistiques -->
        <div class="lg:col-span-3">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">

            <!-- Commandes par priorit√© -->
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-200">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">üèÜ Priorit√©s</h3>
              <div class="space-y-3">
                <div class="flex justify-between items-center">
                  <span class="text-red-600 font-medium">URGENT</span>
                  <span class="bg-red-100 text-red-800 px-2 py-1 rounded-full text-sm">
                    {{ statistics.priorities?.URGENT || 0 }}
                  </span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-orange-600 font-medium">HIGH</span>
                  <span class="bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-sm">
                    {{ statistics.priorities?.HIGH || 0 }}
                  </span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-yellow-600 font-medium">MEDIUM</span>
                  <span class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-sm">
                    {{ statistics.priorities?.MEDIUM || 0 }}
                  </span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-green-600 font-medium">LOW</span>
                  <span class="bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm">
                    {{ statistics.priorities?.LOW || 0 }}
                  </span>
                </div>
              </div>
            </div>

            <!-- Charge de travail -->
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-200">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">‚è±Ô∏è Charge Totale</h3>
              <div class="text-center">
                <div class="text-3xl font-bold text-indigo-600 mb-2">
                  {{ Math.round((statistics.totalMinutes || 0) / 60) }}h
                </div>
                <div class="text-sm text-gray-500">
                  {{ statistics.totalCards || 0 }} cartes
                </div>
                <div class="text-xs text-gray-400 mt-2">
                  {{ statistics.totalMinutes || 0 }} minutes
                </div>
              </div>
            </div>

            <!-- R√©partition employ√©s -->
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-200">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">üë• R√©partition</h3>
              <div class="space-y-2">
                <div v-for="emp in (statistics.employeeWorkload || [])" :key="emp.id"
                     class="flex justify-between items-center text-sm">
                  <span class="text-gray-700 truncate">{{ emp.name }}</span>
                  <span class="text-indigo-600 font-medium">{{ emp.workload }}h</span>
                </div>
                <div v-if="!statistics.employeeWorkload?.length" class="text-gray-400 text-center py-4">
                  Aucune donn√©e
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>

      <!-- üìã Aper√ßu des Planifications -->
      <div class="bg-white rounded-xl shadow-lg border border-gray-200">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-xl font-semibold text-gray-800">üìã Planifications R√©centes</h3>
        </div>

        <div v-if="plannings.length === 0" class="p-8 text-center text-gray-500">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
          </svg>
          <p class="text-lg mb-2">Aucune planification</p>
          <p class="text-sm">G√©n√©rez un planning pour voir les donn√©es ici</p>
        </div>

        <div v-else class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Commande</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employ√©</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priorit√©</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">D√©but</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dur√©e</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cartes</th>
            </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
            <tr v-for="planning in plannings.slice(0, 10)" :key="planning.id" class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                {{ planning.orderNumber }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                {{ planning.employee }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                  <span :class="getPriorityClass(planning.priority)" class="px-2 py-1 rounded-full text-xs font-medium">
                    {{ planning.priority }}
                  </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                {{ planning.startTime }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                {{ planning.duration }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                {{ planning.cardCount }}
              </td>
            </tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- üí¨ Messages syst√®me -->
      <div v-if="message" :class="messageClass" class="mt-6 p-4 rounded-lg">
        <p class="font-medium">{{ message }}</p>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'PokemonPlanningDashboard',

  data() {
    return {
      // √âtats de chargement
      isGenerating: false,
      isSimulating: false,
      isRefreshing: false,

      // Options
      cleanFirst: false,

      // Donn√©es
      statistics: {},
      plannings: [],

      // Interface
      message: '',
      messageType: 'success'
    }
  },

  computed: {
    messageClass() {
      const baseClass = 'p-4 rounded-lg';
      return this.messageType === 'success'
          ? `${baseClass} bg-green-100 border border-green-200 text-green-800`
          : `${baseClass} bg-red-100 border border-red-200 text-red-800`;
    }
  },

  mounted() {
    this.refreshData();
  },

  methods: {
    /**
     * üöÄ G√âN√âRATION DE PLANIFICATION
     */
    async generatePlanning() {
      this.isGenerating = true;
      this.message = '';

      try {
        const response = await fetch('/api/pokemon-planning/generate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            startDate: '2025-06-01',
            cleanFirst: this.cleanFirst
          })
        });

        const result = await response.json();

        if (result.success) {
          this.message = result.message;
          this.messageType = 'success';
          await this.refreshData();
        } else {
          this.message = result.message;
          this.messageType = 'error';
        }

      } catch (error) {
        this.message = `Erreur: ${error.message}`;
        this.messageType = 'error';
      } finally {
        this.isGenerating = false;
      }
    },

    /**
     * üé≤ SIMULATION DE PLANIFICATION
     */
    async simulatePlanning() {
      this.isSimulating = true;

      try {
        const response = await fetch('/api/pokemon-planning/simulate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            startDate: '2025-06-01'
          })
        });

        const result = await response.json();

        if (result.success) {
          this.plannings = result.preview || [];
          this.statistics = result.statistics || {};
          this.message = 'üé≤ Simulation termin√©e - aper√ßu g√©n√©r√©';
          this.messageType = 'success';
        }

      } catch (error) {
        this.message = `Erreur simulation: ${error.message}`;
        this.messageType = 'error';
      } finally {
        this.isSimulating = false;
      }
    },

    /**
     * üîÑ ACTUALISATION DES DONN√âES
     */
    async refreshData() {
      this.isRefreshing = true;

      try {
        const [statsResponse] = await Promise.all([
          fetch('/api/pokemon-planning/statistics')
        ]);

        const stats = await statsResponse.json();

        if (stats.success) {
          this.statistics = stats;
        }

      } catch (error) {
        console.error('Erreur actualisation:', error);
      } finally {
        this.isRefreshing = false;
      }
    },

    /**
     * üßπ NETTOYAGE DES PLANIFICATIONS
     */
    async cleanupPlannings() {
      if (!confirm('Supprimer les anciennes planifications ?')) {
        return;
      }

      try {
        const response = await fetch('/api/pokemon-planning/cleanup', {
          method: 'DELETE'
        });

        const result = await response.json();
        this.message = result.message;
        this.messageType = result.success ? 'success' : 'error';

        if (result.success) {
          await this.refreshData();
        }

      } catch (error) {
        this.message = `Erreur nettoyage: ${error.message}`;
        this.messageType = 'error';
      }
    },

    /**
     * üé® STYLE DES PRIORIT√âS
     */
    getPriorityClass(priority) {
      const classes = {
        'URGENT': 'bg-red-100 text-red-800',
        'HIGH': 'bg-orange-100 text-orange-800',
        'MEDIUM': 'bg-yellow-100 text-yellow-800',
        'LOW': 'bg-green-100 text-green-800'
      };
      return classes[priority] || 'bg-gray-100 text-gray-800';
    }
  }
}
</script>

<style scoped>
/* Styles sp√©cifiques au composant */
.fade-enter-active, .fade-leave-active {
  transition: opacity 0.3s;
}
.fade-enter, .fade-leave-to {
  opacity: 0;
}
</style>