<!-- =============================================== -->
<!-- CORRECTION PROBL√àME CHARGEMENT FRONTEND -->
<!-- =============================================== -->

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'

// ========== INTERFACES ==========
interface Employee {
  id: string
  name: string
  department?: string
  status?: 'AVAILABLE' | 'BUSY' | 'OFFLINE'
  efficiency?: number
  currentOrders?: number
}

interface NewEmployee {
  firstName: string
  lastName: string
  email: string
  workHoursPerDay: number
  active: boolean
}

// ========== SETUP ==========
const router = useRouter()
const emit = defineEmits(['show-notification'])

// ========== STATE ==========
const loading = ref(false)
const employees = ref<Employee[]>([])
const error = ref<string | null>(null)

const showCreateForm = ref(false)
const createLoading = ref(false)
const newEmployee = ref<NewEmployee>({
  firstName: '',
  lastName: '',
  email: '',
  workHoursPerDay: 8,
  active: true
})

// ========== COMPUTED ==========
const activeEmployees = computed(() =>
  employees.value.filter(e => e.status !== 'OFFLINE').length
)

const busyEmployees = computed(() =>
  employees.value.filter(e => e.status === 'BUSY').length
)

const isFormValid = computed(() => {
  return newEmployee.value.firstName.trim() !== '' &&
    newEmployee.value.lastName.trim() !== '' &&
    newEmployee.value.email.trim() !== '' &&
    newEmployee.value.email.includes('@') &&
    newEmployee.value.workHoursPerDay > 0
})

// ========== METHODS ==========

/**
 * ‚úÖ FONCTION getInitials CORRIG√âE
 */
const getInitials = (name: string): string => {
  if (!name || typeof name !== 'string') {
    return 'XX'
  }
  return name
    .split(' ')
    .map(part => part.charAt(0))
    .join('')
    .toUpperCase()
    .slice(0, 2) || 'XX'
}

/**
 * ‚úÖ M√âTHODE CORRIG√âE - Appel direct sans service probl√©matique
 */
const loadEmployees = async () => {
  loading.value = true
  error.value = null

  console.log('üë• [DIRECT] Loading employees directly from API...')

  try {
    console.log('üì° [DIRECT] Fetching from /api/employees/active...')

    // ‚úÖ APPEL DIRECT SANS SERVICE INTERMEDIAIRE
    const response = await fetch('/api/employees/active', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    })

    console.log('üì• [DIRECT] Response status:', response.status)
    console.log('üì• [DIRECT] Response ok:', response.ok)

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    const data = await response.json()
    console.log('üìä [DIRECT] Raw data received:', data)
    console.log('üìä [DIRECT] Data length:', data?.length)

    if (!Array.isArray(data)) {
      throw new Error('Response is not an array')
    }

    if (data.length === 0) {
      console.warn('‚ö†Ô∏è [DIRECT] No employees found')
      employees.value = []

      emit('show-notification', {
        message: 'No employees found',
        details: 'The database appears to be empty.',
        type: 'warning'
      })
      return
    }

    // ‚úÖ MAPPING DIRECT DES DONN√âES BACKEND
    employees.value = data.map((emp: any) => {
      console.log('üë§ [DIRECT] Processing employee:', emp.firstName, emp.lastName)

      return {
        id: emp.id,
        name: emp.fullName || emp.name || `${emp.firstName} ${emp.lastName}`.trim(),
        department: 'PROCESSING',
        status: emp.active ? 'AVAILABLE' : 'OFFLINE',
        efficiency: 85,
        currentOrders: emp.currentLoad || 0
      }
    })

    console.log(`‚úÖ [DIRECT] Successfully loaded ${employees.value.length} employees`)
    console.log('üë• [DIRECT] Employee names:', employees.value.map(e => e.name))

    emit('show-notification', {
      message: 'Employees loaded successfully',
      details: `Found ${employees.value.length} employees: ${employees.value.map(e => e.name).join(', ')}`,
      type: 'success'
    })

  } catch (error: any) {
    console.error('‚ùå [DIRECT] Error in loadEmployees:', error)

    employees.value = []
    error.value = error.message

    emit('show-notification', {
      message: 'Failed to load employees',
      details: `Error: ${error.message}`,
      type: 'error'
    })

  } finally {
    loading.value = false
    console.log('üèÅ [DIRECT] loadEmployees finished')
  }
}

/**
 * ‚úÖ CR√âATION EMPLOY√â - Appel direct
 */
const createEmployee = async () => {
  if (!isFormValid.value) {
    emit('show-notification', {
      message: 'Please fill all required fields correctly',
      type: 'error'
    })
    return
  }

  createLoading.value = true

  try {
    console.log('üë§ [DIRECT] Creating employee:', newEmployee.value)

    const response = await fetch('/api/employees', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        firstName: newEmployee.value.firstName.trim(),
        lastName: newEmployee.value.lastName.trim(),
        email: newEmployee.value.email.trim(),
        workHoursPerDay: newEmployee.value.workHoursPerDay,
        active: newEmployee.value.active
      })
    })

    console.log('üì• [DIRECT] Create response status:', response.status)

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: 'Unknown error' }))
      throw new Error(errorData.message || `HTTP ${response.status}`)
    }

    const result = await response.json()
    console.log('‚úÖ [DIRECT] Employee created:', result)

    emit('show-notification', {
      message: 'Employee created successfully!',
      details: `${newEmployee.value.firstName} ${newEmployee.value.lastName} has been added.`,
      type: 'success'
    })

    cancelCreate()
    await loadEmployees()

  } catch (error: any) {
    console.error('‚ùå [DIRECT] Create employee error:', error)

    emit('show-notification', {
      message: 'Failed to create employee',
      details: error.message,
      type: 'error'
    })
  } finally {
    createLoading.value = false
  }
}

/**
 * ‚úÖ TEST CONNEXION - Appel direct
 */
const testConnection = async () => {
  try {
    console.log('üß™ [DIRECT] Testing connection...')

    const response = await fetch('/api/employees/debug')
    const success = response.ok

    console.log(`üß™ [DIRECT] Connection test: ${success ? 'SUCCESS' : 'FAILED'}`)

    if (success) {
      const data = await response.json()
      console.log('üß™ [DIRECT] Debug data:', data)
    }

    return success

  } catch (error) {
    console.error('üß™ [DIRECT] Connection test failed:', error)
    return false
  }
}

const cancelCreate = () => {
  showCreateForm.value = false
  newEmployee.value = {
    firstName: '',
    lastName: '',
    email: '',
    workHoursPerDay: 8,
    active: true
  }
}

const viewEmployee = (employee: Employee) => {
  console.log(`üîÑ Navigating to employee: ${employee.name}`)

  emit('show-notification', {
    message: `Opening ${employee.name}'s details`,
    type: 'info'
  })
}

const toggleStatus = (employee: Employee) => {
  const oldStatus = employee.status
  employee.status = employee.status === 'AVAILABLE' ? 'BUSY' : 'AVAILABLE'

  emit('show-notification', {
    message: `${employee.name} status changed`,
    details: `Changed from ${oldStatus} to ${employee.status}`,
    type: 'success'
  })
}

// ========== LIFECYCLE ==========
onMounted(async () => {
  console.log('üë• EmployeeListView mounted - DIRECT API CALLS')

  const connectionOK = await testConnection()
  console.log('üîå Connection test:', connectionOK ? 'OK' : 'FAILED')

  // Toujours essayer de charger, m√™me si le test √©choue
  await loadEmployees()
})

// ========== DEBUG FUNCTIONS ==========
const debugInfo = () => {
    console.log('üîç DEBUG INFO:')
    console.log('- Loading:', loading.value)
    console.log('- Employees count:', employees.value.length)
    console.log('- Error:', error.value)
    console.log('- Employees:', employees.value)
  }

// Exposer pour debug dans la console
;(window as any).debugEmployees = debugInfo
;(window as any).retryLoad = loadEmployees
</script>

<template>
  <div class="min-h-screen bg-gray-50 p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">üë• Team Management</h1>
        <p class="text-gray-600 mt-1">Manage your Pokemon card processing team</p>
      </div>
      <div class="flex space-x-2">
        <button
          @click="loadEmployees"
          class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
        >
          üîÑ Reload
        </button>
        <button
          @click="showCreateForm = true"
          class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
        >
          ‚ûï Add Employee
        </button>
      </div>
    </div>

    <!-- Error Display -->
    <div v-if="error" class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
      <div class="flex">
        <div class="text-red-400 mr-3">‚ùå</div>
        <div>
          <h3 class="text-red-800 font-medium">Error Loading Employees</h3>
          <p class="text-red-700 text-sm mt-1">{{ error }}</p>
          <button
            @click="loadEmployees"
            class="mt-2 text-sm bg-red-100 text-red-800 px-3 py-1 rounded hover:bg-red-200"
          >
            Try Again
          </button>
        </div>
      </div>
    </div>

    <!-- Stats Cards -->
    <div v-if="employees.length > 0" class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="text-3xl font-bold text-blue-600">{{ employees.length }}</div>
          <div class="ml-3">
            <p class="text-sm font-medium text-gray-500">Total Employees</p>
            <p class="text-xs text-gray-400">{{ activeEmployees }} active</p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="text-3xl font-bold text-green-600">{{ activeEmployees }}</div>
          <div class="ml-3">
            <p class="text-sm font-medium text-gray-500">Available</p>
            <p class="text-xs text-gray-400">Ready for work</p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="text-3xl font-bold text-orange-600">{{ busyEmployees }}</div>
          <div class="ml-3">
            <p class="text-sm font-medium text-gray-500">Busy</p>
            <p class="text-xs text-gray-400">Currently working</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Loading State -->
    <div v-if="loading" class="text-center py-12">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      <p class="mt-2 text-gray-600">Loading employees...</p>
      <p class="mt-1 text-sm text-gray-500">Backend is working, this should be quick!</p>
    </div>

    <!-- Employee Grid -->
    <div v-else-if="employees.length > 0" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div
        v-for="employee in employees"
        :key="employee.id"
        class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer"
        @click="viewEmployee(employee)"
      >
        <div class="p-6">
          <!-- Employee Header -->
          <div class="flex items-center mb-4">
            <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 font-bold">
              {{ getInitials(employee.name) }}
            </div>
            <div class="ml-3">
              <h3 class="text-lg font-semibold text-gray-900">{{ employee.name }}</h3>
              <p class="text-sm text-gray-500">{{ employee.department }}</p>
            </div>
          </div>

          <!-- Employee Stats -->
          <div class="space-y-2">
            <div class="flex justify-between text-sm">
              <span>Status:</span>
              <span
                :class="{
                  'text-green-600': employee.status === 'AVAILABLE',
                  'text-orange-600': employee.status === 'BUSY',
                  'text-red-600': employee.status === 'OFFLINE'
                }"
              >
                {{ employee.status }}
              </span>
            </div>
            <div class="flex justify-between text-sm">
              <span>Efficiency:</span>
              <span class="text-gray-900">{{ employee.efficiency }}%</span>
            </div>
            <div class="flex justify-between text-sm">
              <span>Current Orders:</span>
              <span class="text-gray-900">{{ employee.currentOrders }}</span>
            </div>
          </div>

          <!-- Actions -->
          <div class="mt-4 flex space-x-2">
            <button
              @click.stop="viewEmployee(employee)"
              class="flex-1 bg-blue-50 text-blue-700 px-3 py-2 rounded text-sm hover:bg-blue-100"
            >
              View Details
            </button>
            <button
              @click.stop="toggleStatus(employee)"
              class="flex-1 bg-gray-50 text-gray-700 px-3 py-2 rounded text-sm hover:bg-gray-100"
            >
              {{ employee.status === 'AVAILABLE' ? 'Set Busy' : 'Set Available' }}
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Empty State -->
    <div v-else class="text-center py-12">
      <div class="text-6xl mb-4">üë•</div>
      <h3 class="text-xl font-semibold text-gray-900 mb-2">No employees found</h3>
      <p class="text-gray-600 mb-4">Get started by adding your first team member</p>
      <div class="space-x-3">
        <button
          @click="loadEmployees"
          class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
        >
          üîÑ Reload Employees
        </button>
        <button
          @click="showCreateForm = true"
          class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
        >
          ‚ûï Add First Employee
        </button>
      </div>
    </div>

    <!-- Create Employee Modal -->
    <div
      v-if="showCreateForm"
      class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
    >
      <div class="bg-white rounded-lg p-6 w-full max-w-md">
        <h3 class="text-lg font-semibold mb-4">Add New Employee</h3>

        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
            <input
              v-model="newEmployee.firstName"
              type="text"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter first name"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
            <input
              v-model="newEmployee.lastName"
              type="text"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter last name"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input
              v-model="newEmployee.email"
              type="email"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter email address"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Work Hours per Day</label>
            <input
              v-model.number="newEmployee.workHoursPerDay"
              type="number"
              min="1"
              max="12"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div class="mt-6 flex space-x-3">
          <button
            @click="cancelCreate"
            class="flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
            :disabled="createLoading"
          >
            Cancel
          </button>
          <button
            @click="createEmployee"
            :disabled="!isFormValid || createLoading"
            class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {{ createLoading ? 'Creating...' : 'Create Employee' }}
          </button>
        </div>
      </div>
    </div>
  </div>
</template>
