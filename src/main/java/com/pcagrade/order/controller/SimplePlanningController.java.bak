package com.pcagrade.order.controller;

import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

/**
 * üéØ SIMPLE PLANNING CONTROLLER - Version minimale pour tests
 */
@RestController
@RequestMapping("/api/planning-simple")
@CrossOrigin(origins = "*")
public class SimplePlanningController {

    private static final Logger log = LoggerFactory.getLogger(SimplePlanningController.class);

    @Autowired
    private EntityManager entityManager;

    /**
     * Test endpoint simple
     */
    @GetMapping("/test")
    public ResponseEntity<Map<String, Object>> test() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "OK");
        response.put("message", "Simple planning controller is working");
        response.put("timestamp", System.currentTimeMillis());
        return ResponseEntity.ok(response);
    }

    /**
     * üìã GET ALL PLANNINGS - Version simple
     */
    @GetMapping
    public ResponseEntity<Map<String, Object>> getAllPlannings() {
        try {
            log.info("üìã Fetching plannings from j_planning table");

            String sql = "SELECT COUNT(*) FROM j_planning";
            Query query = entityManager.createNativeQuery(sql);
            Number count = (Number) query.getSingleResult();

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("count", count.intValue());
            response.put("message", "Found " + count + " plannings");

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå Error fetching plannings", e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * üìä GET BASIC STATS
     */
    @GetMapping("/stats")
    public ResponseEntity<Map<String, Object>> getStats() {
        try {
            Map<String, Object> stats = new HashMap<>();

            // Count plannings
            String sqlPlannings = "SELECT COUNT(*) FROM j_planning";
            Query queryPlannings = entityManager.createNativeQuery(sqlPlannings);
            Number planningCount = (Number) queryPlannings.getSingleResult();
            stats.put("totalPlannings", planningCount.intValue());

            // Count employees
            String sqlEmployees = "SELECT COUNT(*) FROM j_employee";
            Query queryEmployees = entityManager.createNativeQuery(sqlEmployees);
            Number employeeCount = (Number) queryEmployees.getSingleResult();
            stats.put("totalEmployees", employeeCount.intValue());

            // Count orders
            String sqlOrders = "SELECT COUNT(*) FROM `order`";
            Query queryOrders = entityManager.createNativeQuery(sqlOrders);
            Number orderCount = (Number) queryOrders.getSingleResult();
            stats.put("totalOrders", orderCount.intValue());

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("stats", stats);

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå Error fetching stats", e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
}