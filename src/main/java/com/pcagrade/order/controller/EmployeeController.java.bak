// ========== CORRECTION COMPL√àTE EmployeeController.java ==========

package com.pcagrade.order.controller;

import com.pcagrade.order.entity.Employee;
import com.pcagrade.order.service.EmployeeService;
import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.*;

/**
 * REST Controller for Employee Management - English Version
 * Handles employee CRUD operations and planning-related endpoints
 */
@RestController
@RequestMapping("/api/employees")
@CrossOrigin(origins = {"http://localhost:3000", "http://127.0.0.1:3000"})
public class EmployeeControllerOld {

    @Autowired
    private EntityManager entityManager;

    @Autowired
    private EmployeeService employeeService;

    /**
     * üë• GET ALL EMPLOYEES FOR FRONTEND
     * Endpoint: GET /api/employees
     */
    @GetMapping
    public ResponseEntity<List<Map<String, Object>>> getAllEmployees() {
        try {
            System.out.println("üë• Frontend: Retrieving employees list...");

            // Get real employees from database
            List<Map<String, Object>> employees = employeeService.getAllActiveEmployees();

            System.out.println("‚úÖ " + employees.size() + " employees returned from database");
            return ResponseEntity.ok(employees);

        } catch (Exception e) {
            System.err.println("‚ùå Error retrieving employees: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(new ArrayList<>());
        }
    }

    /**
     * üë• GET ACTIVE EMPLOYEES ONLY
     * Endpoint: GET /api/employees/active
     */
    @GetMapping("/active")
    public ResponseEntity<List<Map<String, Object>>> getActiveEmployees() {
        try {
            System.out.println("üë• Frontend: Getting active employees from database...");

            List<Map<String, Object>> employees = employeeService.getAllActiveEmployees();

            System.out.println("‚úÖ " + employees.size() + " active employees returned from database");
            return ResponseEntity.ok(employees);

        } catch (Exception e) {
            System.err.println("‚ùå Error getting active employees: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(new ArrayList<>());
        }
    }

    // ==========================================
// BACKEND: Endpoint cr√©ation employ√© dans EmployeeController.java
// ==========================================

    /**
     * ‚úÖ AJOUTEZ cette m√©thode √† EmployeeController.java
     * Endpoint pour cr√©er un nouvel employ√©
     */
// Dans EmployeeController.java, remplacez la m√©thode createEmployee par ceci :

    @PostMapping
    @Transactional
    public ResponseEntity<Map<String, Object>> createEmployee(@RequestBody Map<String, Object> employeeData) {
        Map<String, Object> response = new HashMap<>();

        try {
            System.out.println("üíæ Creating employee with data: " + employeeData);

            // 1. Validation des donn√©es
            String firstName = (String) employeeData.get("firstName");
            String lastName = (String) employeeData.get("lastName");
            String email = (String) employeeData.get("email");

            if (firstName == null || firstName.trim().isEmpty() ||
                    lastName == null || lastName.trim().isEmpty()) {
                response.put("success", false);
                response.put("message", "First name and last name are required");
                return ResponseEntity.badRequest().body(response);
            }

            // 2. Valeurs par d√©faut
            Integer workHours = 8;
            if (employeeData.containsKey("workHoursPerDay")) {
                Object workHoursObj = employeeData.get("workHoursPerDay");
                if (workHoursObj instanceof Number) {
                    workHours = ((Number) workHoursObj).intValue();
                }
            }

            Boolean active = true;
            if (employeeData.containsKey("active")) {
                active = (Boolean) employeeData.get("active");
            }

            // 3. G√©n√©rer ID
            String employeeId = UUID.randomUUID().toString().replace("-", "");

            // 4. ‚úÖ CORRECTION : Utiliser j_employee au lieu de employee
            String insertSql = """
            INSERT INTO j_employee 
            (id, first_name, last_name, email, work_hours_per_day, active, creation_date, modification_date)
            VALUES (UNHEX(?), ?, ?, ?, ?, ?, NOW(), NOW())
        """;

            Query insertQuery = entityManager.createNativeQuery(insertSql);
            insertQuery.setParameter(1, employeeId);
            insertQuery.setParameter(2, firstName.trim());
            insertQuery.setParameter(3, lastName.trim());
            insertQuery.setParameter(4, email != null ? email.trim() : null);
            insertQuery.setParameter(5, workHours);
            insertQuery.setParameter(6, active ? 1 : 0); // Convertir Boolean vers Integer

            int rowsAffected = insertQuery.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("‚úÖ Employee created successfully: " + firstName + " " + lastName);

                response.put("success", true);
                response.put("message", "Employee created successfully");
                response.put("id", employeeId);
                response.put("fullName", firstName + " " + lastName);
                response.put("email", email);
                response.put("workHoursPerDay", workHours);
                response.put("active", active);

                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "Failed to create employee");
                return ResponseEntity.status(500).body(response);
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error creating employee: " + e.getMessage());
            e.printStackTrace();

            response.put("success", false);
            response.put("message", "Error creating employee: " + e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }


    /**
     * ‚úÖ M√âTHODE ALTERNATIVE: Cr√©ation via EmployeeService
     * Si vous pr√©f√©rez utiliser le service au lieu de SQL direct
     */
    @PostMapping("/via-service")
    @Transactional
    public ResponseEntity<Map<String, Object>> createEmployeeViaService(@RequestBody Map<String, Object> employeeData) {
        Map<String, Object> response = new HashMap<>();

        try {
            // Cr√©er un objet Employee
            Employee employee = new Employee();
            employee.setFirstName((String) employeeData.get("firstName"));
            employee.setLastName((String) employeeData.get("lastName"));
            employee.setEmail((String) employeeData.get("email"));
            employee.setWorkHoursPerDay(employeeData.get("workHoursPerDay") != null ?
                    ((Number) employeeData.get("workHoursPerDay")).intValue() : 8);
            employee.setActive(employeeData.get("active") != null ?
                    (Boolean) employeeData.get("active") : true);

            // Utiliser le service pour cr√©er l'employ√©
            Employee createdEmployee = employeeService.createEmployee(employee);

            response.put("success", true);
            response.put("message", "Employee created successfully");
            response.put("id", createdEmployee.getId().toString());
            response.put("fullName", createdEmployee.getFullName());
            response.put("email", createdEmployee.getEmail());

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "Error creating employee: " + e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }

    /**
     * ‚úÖ M√âTHODE D'AIDE: Validation d'email simple
     */
    private boolean isValidEmail(String email) {
        return email != null &&
                email.trim().length() > 0 &&
                email.contains("@") &&
                email.contains(".") &&
                email.indexOf("@") > 0 &&
                email.lastIndexOf(".") > email.indexOf("@");
    }

    /**
     * üìÖ GET EMPLOYEES WITH PLANNING DATA
     * Endpoint: GET /api/employees/planning-data
     */
    @GetMapping("/planning-data")
    public ResponseEntity<List<Map<String, Object>>> getEmployeesWithPlanningData(
            @RequestParam(required = false) String date) {
        try {
            System.out.println("üìÖ Getting employees with planning data for date: " + date);

            String targetDate = date != null ? date : LocalDateTime.now().toLocalDate().toString();

            List<Map<String, Object>> employeesWithPlanning = employeeService.getEmployeesWithPlanningData(targetDate);

            if (employeesWithPlanning.isEmpty()) {
                // Fallback: convert regular employees to planning format
                List<Map<String, Object>> employees = employeeService.getAllActiveEmployees();
                employeesWithPlanning = employees.stream().map(emp -> {
                    Map<String, Object> planningEmp = new HashMap<>(emp);
                    planningEmp.put("name", emp.get("fullName"));
                    planningEmp.put("totalMinutes", 0);
                    planningEmp.put("maxMinutes", ((Number) emp.getOrDefault("workHoursPerDay", 8)).intValue() * 60);
                    planningEmp.put("status", "available");
                    planningEmp.put("taskCount", 0);
                    planningEmp.put("cardCount", 0);
                    return planningEmp;
                }).toList();
            }

            System.out.println("‚úÖ " + employeesWithPlanning.size() + " employees with planning returned");
            return ResponseEntity.ok(employeesWithPlanning);

        } catch (Exception e) {
            System.err.println("‚ùå Error getting employees with planning: " + e.getMessage());
            return ResponseEntity.ok(new ArrayList<>());
        }
    }

    /**
     * üë§ GET EMPLOYEE BY ID
     * Endpoint: GET /api/employees/{id}
     */
    @GetMapping("/{id}")
    public ResponseEntity<Map<String, Object>> getEmployeeById(@PathVariable String id) {
        try {
            System.out.println("üë§ Getting employee by ID: " + id);

            Optional<Employee> employee = employeeService.findById(id);

            if (employee.isPresent()) {
                Employee emp = employee.get();
                Map<String, Object> employeeData = new HashMap<>();
                employeeData.put("id", emp.getId().toString());
                employeeData.put("firstName", emp.getFirstName());
                employeeData.put("lastName", emp.getLastName());
                employeeData.put("email", emp.getEmail());
                employeeData.put("workHoursPerDay", emp.getWorkHoursPerDay());
                employeeData.put("active", emp.getActive());
                employeeData.put("creationDate", emp.getCreationDate());
                employeeData.put("fullName", emp.getFirstName() + " " + emp.getLastName());

                return ResponseEntity.ok(employeeData);
            } else {
                return ResponseEntity.notFound().build();
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error getting employee by ID: " + e.getMessage());
            return ResponseEntity.status(500).body(Map.of("error", e.getMessage()));
        }
    }


    /**
     * üîß INITIALIZE EMPLOYEE TABLE
     * Endpoint: POST /api/employees/init-table
     */
    @PostMapping("/init-table")
    @Transactional
    public ResponseEntity<Map<String, Object>> initializeEmployeeTable() {
        try {
            System.out.println("üîß Initializing employee table...");

            String createTableSql = """
                CREATE TABLE IF NOT EXISTS employee (
                    id BINARY(16) NOT NULL PRIMARY KEY,
                    first_name VARCHAR(100) NOT NULL,
                    last_name VARCHAR(100) NOT NULL,
                    email VARCHAR(150),
                    work_hours_per_day INT DEFAULT 8,
                    active BOOLEAN DEFAULT TRUE,
                    creation_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    modification_date DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    INDEX idx_employee_active (active),
                    INDEX idx_employee_name (last_name, first_name)
                )
                """;

            Query query = entityManager.createNativeQuery(createTableSql);
            query.executeUpdate();

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Employee table created/verified successfully");

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            System.err.println("‚ùå Error creating table: " + e.getMessage());

            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Error creating table: " + e.getMessage());

            return ResponseEntity.status(500).body(errorResponse);
        }
    }

    /**
     * üß™ CREATE TEST EMPLOYEE
     * Endpoint: POST /api/employees/create-test
     */
    @PostMapping("/create-test")
    @Transactional
    public ResponseEntity<Map<String, Object>> createTestEmployee() {
        try {
            System.out.println("üß™ Creating test employee...");

            Map<String, Object> testData = new HashMap<>();
            testData.put("firstName", "John");
            testData.put("lastName", "Doe");
            testData.put("email", "john.doe@test.com");
            testData.put("workHoursPerDay", 8);

            return createEmployee(testData);

        } catch (Exception e) {
            System.err.println("‚ùå Error creating test employee: " + e.getMessage());
            return ResponseEntity.status(500).body(Map.of("error", e.getMessage()));
        }
    }

    @GetMapping("/debug")
    public ResponseEntity<Map<String, Object>> debugEmployees() {
        Map<String, Object> debug = new HashMap<>();

        try {
            // 1. Check both employee tables
            String sqlCheckFrench = "SHOW TABLES LIKE 'j_employee'";
            Query queryCheckFrench = entityManager.createNativeQuery(sqlCheckFrench);
            @SuppressWarnings("unchecked")
            List<Object> frenchTables = queryCheckFrench.getResultList();

            String sqlCheckEnglish = "SHOW TABLES LIKE 'employee'";
            Query queryCheckEnglish = entityManager.createNativeQuery(sqlCheckEnglish);
            @SuppressWarnings("unchecked")
            List<Object> englishTables = queryCheckEnglish.getResultList();

            debug.put("table_j_employee_exists", !frenchTables.isEmpty());
            debug.put("table_employee_exists", !englishTables.isEmpty());

            // 2. Data from French table (j_employee)
            if (!frenchTables.isEmpty()) {
                try {
                    String sqlCountFrench = "SELECT COUNT(*) FROM j_employee";
                    Query queryCountFrench = entityManager.createNativeQuery(sqlCountFrench);
                    Number countFrench = (Number) queryCountFrench.getSingleResult();
                    debug.put("j_employee_total_count", countFrench.intValue());

                    String sqlCountActiveFrench = "SELECT COUNT(*) FROM j_employee WHERE actif = 1";
                    Query queryCountActiveFrench = entityManager.createNativeQuery(sqlCountActiveFrench);
                    Number countActiveFrench = (Number) queryCountActiveFrench.getSingleResult();
                    debug.put("j_employee_active_count", countActiveFrench.intValue());

                    // Sample data from French table
                    String sqlSampleFrench = "SELECT HEX(id), prenom, nom, email, actif FROM j_employee LIMIT 5";
                    Query querySampleFrench = entityManager.createNativeQuery(sqlSampleFrench);
                    @SuppressWarnings("unchecked")
                    List<Object[]> sampleDataFrench = querySampleFrench.getResultList();

                    List<Map<String, Object>> employeesFrench = new ArrayList<>();
                    for (Object[] row : sampleDataFrench) {
                        Map<String, Object> emp = new HashMap<>();
                        emp.put("id", row[0]);
                        emp.put("firstName", row[1]); // prenom
                        emp.put("lastName", row[2]);  // nom
                        emp.put("email", row[3]);
                        emp.put("active", ((Number) row[4]).intValue() == 1);
                        employeesFrench.add(emp);
                    }
                    debug.put("j_employee_sample_data", employeesFrench);

                    // Table structure
                    String sqlDescFrench = "DESCRIBE j_employee";
                    Query queryDescFrench = entityManager.createNativeQuery(sqlDescFrench);
                    @SuppressWarnings("unchecked")
                    List<Object[]> structureFrench = queryDescFrench.getResultList();

                    List<String> columnsFrench = new ArrayList<>();
                    for (Object[] row : structureFrench) {
                        columnsFrench.add((String) row[0]);
                    }
                    debug.put("j_employee_columns", columnsFrench);

                } catch (Exception e) {
                    debug.put("j_employee_error", e.getMessage());
                }
            }

            // 3. Data from English table (employee)
            if (!englishTables.isEmpty()) {
                try {
                    String sqlCountEnglish = "SELECT COUNT(*) FROM employee";
                    Query queryCountEnglish = entityManager.createNativeQuery(sqlCountEnglish);
                    Number countEnglish = (Number) queryCountEnglish.getSingleResult();
                    debug.put("employee_total_count", countEnglish.intValue());

                    String sqlCountActiveEnglish = "SELECT COUNT(*) FROM employee WHERE active = 1";
                    Query queryCountActiveEnglish = entityManager.createNativeQuery(sqlCountActiveEnglish);
                    Number countActiveEnglish = (Number) queryCountActiveEnglish.getSingleResult();
                    debug.put("employee_active_count", countActiveEnglish.intValue());

                    // Sample data from English table
                    String sqlSampleEnglish = "SELECT HEX(id), first_name, last_name, email, active FROM employee LIMIT 5";
                    Query querySampleEnglish = entityManager.createNativeQuery(sqlSampleEnglish);
                    @SuppressWarnings("unchecked")
                    List<Object[]> sampleDataEnglish = querySampleEnglish.getResultList();

                    List<Map<String, Object>> employeesEnglish = new ArrayList<>();
                    for (Object[] row : sampleDataEnglish) {
                        Map<String, Object> emp = new HashMap<>();
                        emp.put("id", row[0]);
                        emp.put("firstName", row[1]);
                        emp.put("lastName", row[2]);
                        emp.put("email", row[3]);
                        emp.put("active", row[4]);
                        employeesEnglish.add(emp);
                    }
                    debug.put("employee_sample_data", employeesEnglish);

                } catch (Exception e) {
                    debug.put("employee_error", e.getMessage());
                }
            }

            debug.put("employee_service_available", employeeService != null);
            debug.put("timestamp", LocalDateTime.now().toString());
            debug.put("recommendation",
                    !frenchTables.isEmpty() ?
                            "Using j_employee table (French schema) - " + debug.get("j_employee_active_count") + " active employees" :
                            "Using employee table (English schema) - " + debug.get("employee_active_count") + " active employees"
            );

        } catch (Exception e) {
            debug.put("error", e.getMessage());
            e.printStackTrace();
        }

        return ResponseEntity.ok(debug);
    }

    /**
     * ‚úÖ DIAGNOSTIC METHOD : Ajoutez √† EmployeeController.java
     */
    @GetMapping("/debug-sql")
    public ResponseEntity<Map<String, Object>> debugSqlExecution() {
        Map<String, Object> debug = new HashMap<>();

        try {
            // Test direct de la requ√™te SQL
            String sql = """
            SELECT 
                HEX(e.id) as id,
                e.prenom as first_name,
                e.nom as last_name,
                e.email,
                COALESCE(e.heures_travail_par_jour, 8) as work_hours_per_day,
                COALESCE(e.actif, 1) as active,
                e.date_creation as creation_date
            FROM j_employee e
            WHERE COALESCE(e.actif, 1) = 1
            ORDER BY e.nom, e.prenom
        """;

            Query query = entityManager.createNativeQuery(sql);
            @SuppressWarnings("unchecked")
            List<Object[]> results = query.getResultList();

            debug.put("sql_success", true);
            debug.put("sql_result_count", results.size());
            debug.put("sql_query", sql);

            // Essayer de traiter la premi√®re ligne pour voir s'il y a des erreurs de mapping
            if (!results.isEmpty()) {
                Object[] firstRow = results.get(0);
                debug.put("first_row_data", Arrays.toString(firstRow));

                try {
                    Map<String, Object> testEmployee = new HashMap<>();
                    testEmployee.put("id", (String) firstRow[0]);
                    testEmployee.put("firstName", (String) firstRow[1]);
                    testEmployee.put("lastName", (String) firstRow[2]);
                    testEmployee.put("email", (String) firstRow[3]);

                    debug.put("mapping_success", true);
                    debug.put("sample_employee", testEmployee);

                } catch (Exception mappingError) {
                    debug.put("mapping_error", mappingError.getMessage());
                    debug.put("mapping_success", false);
                }
            }

            // Test via service
            List<Map<String, Object>> serviceResult = employeeService.getAllActiveEmployees();
            debug.put("service_result_count", serviceResult.size());

        } catch (Exception e) {
            debug.put("sql_success", false);
            debug.put("sql_error", e.getMessage());
        }

        return ResponseEntity.ok(debug);
    }
}